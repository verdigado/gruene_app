### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `./tools/circleci-update-config` from the project root.
commands:
    check_circleci_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: ./tools/circleci-update-config
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running the `./tools/circleci-update-config` script."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    install_cocoapods:
        description: Restores and saves the cocoa pods cache.
        steps:
            - restore_cache:
                keys:
                    - 1-cocoapods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                name: Restore CocoaPods Cache
            - run:
                command: bundle exec pod install
                name: Install CocoaPods
                working_directory: ios
            - save_cache:
                key: 1-cocoapods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                name: Save CocoaPods Cache
                paths:
                    - ~/Library/Caches/CocoaPods/
    install_fastlane:
        description: Restores and saves fastlane cache of the passed directory.
        parameters:
            directory:
                type: string
        steps:
            - restore_cache:
                keys:
                    - v1-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                    - v1-gems-{{ arch }}-
                name: Restore Ruby Cache
            - run:
                command: bundle config set path 'vendor/bundle'
                name: Configure Installation Directory
                working_directory: << parameters.directory >>
            - run:
                command: bundle check || bundle install
                name: Bundle Install
                working_directory: << parameters.directory >>
            - save_cache:
                key: v1-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                name: Save Ruby Cache
                paths:
                    - << parameters.directory >>/vendor/bundle
    install_flutter:
        parameters:
            precache:
                default: none
                enum:
                    - none
                    - android
                    - ios
                type: enum
        steps:
            - when:
                condition:
                    equal:
                        - << parameters.precache >>
                        - ios
                steps:
                    - run:
                        command: |
                            brew tap dart-lang/dart
                            brew install dart@3.5.3
                            brew link dart@3.5.3
                        name: Install Dart Mac
            - unless:
                condition:
                    equal:
                        - << parameters.precache >>
                        - ios
                steps:
                    - run:
                        command: |
                            curl -o dart.deb https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.3/linux_packages/dart_3.5.3-1_amd64.deb
                            sudo dpkg -i dart.deb
                        name: Install Dart Linux
            - run:
                command: |
                    dart pub global activate fvm
                    echo 'export PATH=$HOME/.pub-cache/bin:$PATH' >> $BASH_ENV
                    export PATH="$PATH":"$HOME/.pub-cache/bin"
                name: Install FVM
            - restore_cache:
                keys:
                    - v1-fvm-{{ arch }}-{{ checksum ".fvmrc" }}-{{ checksum "pubspec.yaml" }}-{{ checksum "pubspec.lock"  }}
                    - v1-fvm-{{ arch }}-
            - run:
                command: fvm install
                name: Install Flutter
            - run:
                command: fvm flutter config --no-analytics
                name: Configure Flutter
            - run:
                command: fvm flutter --version
                name: Show Flutter version
            - run:
                command: fvm flutter pub get --enforce-lockfile
                name: Install Flutter Packages
            - unless:
                condition:
                    equal:
                        - << parameters.precache >>
                        - none
                steps:
                    - run:
                        command: fvm flutter precache --<< parameters.precache >>
                        name: Precache Flutter Binary Artifacts
                        working_directory: << parameters.precache >>
            - save_cache:
                key: v1-fvm-{{ arch }}-{{ checksum ".fvmrc" }}-{{ checksum "pubspec.yaml" }}-{{ checksum "pubspec.lock"  }}
                paths:
                    - .fvm
                    - ~/fvm/
    install_gradle_dependencies:
        description: Restores and saves the gradle cache.
        steps:
            - restore_cache:
                keys:
                    - v1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
                    - v1-gradle-
            - run:
                command: ./gradlew androidDependencies
                name: Download Gradle Dependencies
                working_directory: android
            - save_cache:
                key: v1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "android/settings.gradle" }}
                paths:
                    - ~/.gradle
    install_node_modules:
        description: Restores and saves the node_modules directories of the tools directory.
        steps:
            - restore_cache:
                keys:
                    - v1-node-modules-{{checksum "tools/package-lock.json" }}
                    - v1-node-modules-
            - run:
                command: '[ ! -d node_modules ] && npm ci --ignore-scripts --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache.'
                name: Install node dependencies for npm workspaces
                working_directory: tools
            - save_cache:
                key: v1-node-modules-{{checksum "tools/package-lock.json" }}
                paths:
                    - ~/tools/node_modules
    persist_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ${BASH_ENV}
                name: List environment variables
            - run:
                command: cat ${BASH_ENV} >> environment_variables
                name: Save environment variables to file
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_project:
        steps:
            - run:
                command: fvm dart run slang
                name: Generate Translations
            - run:
                command: cp .env.prod .env
                name: Apply Production Environment
            - run:
                command: fvm dart run build_runner build
                name: Generate Swagger API
    prepare_workspace:
        description: Attach the workspace at ~/attached_workspace and list its contents
        steps:
            - attach_workspace:
                at: ~/attached_workspace
            - run:
                command: ls -A ~/attached_workspace
                name: Attached workspace contents
            - run:
                command: ls -AR ~/attached_workspace
                name: Recursively list attached workspace contents
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ~/attached_workspace/environment_variables
                name: List environment variables
            - run:
                command: cat ~/attached_workspace/environment_variables >> ${BASH_ENV}
                name: Restore environment variables
jobs:
    build_android:
        docker:
            - image: cimg/android:2024.01.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
            GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m" -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
        resource_class: large
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - install_flutter:
                precache: android
            - prepare_project
            - install_fastlane:
                directory: android
            - install_gradle_dependencies
            - run:
                command: bundle exec fastlane android keystore
                name: '[FL] Prepare Android Keystore'
                working_directory: android
            - run:
                command: bundle exec fastlane android build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Build'
                working_directory: android
            - run:
                command: mv ~/project/build/app/outputs/bundle/release/app-release.aab app-release.aab
                name: Move aab
            - store_artifacts:
                path: app-release.aab
            - run:
                command: mv ~/project/build/app/outputs/apk/release/app-release.apk app-release.apk
                name: Move apk
            - store_artifacts:
                path: app-release.apk
            - persist_to_workspace:
                paths:
                    - app-release.aab
                    - app-release.apk
                root: .
            - persist_environment_variables
    build_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 16.1.0
        steps:
            - checkout
            - prepare_workspace
            - run:
                command: softwareupdate --install-rosetta --agree-to-license
                name: Install rosetta
            - restore_environment_variables
            - install_flutter:
                precache: ios
            - prepare_project
            - install_fastlane:
                directory: ios
            - install_cocoapods
            - run:
                command: bundle exec fastlane ios build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Build'
                working_directory: ios
            - store_artifacts:
                destination: app-release.ipa
                path: ~/app-release.ipa
            - persist_to_workspace:
                paths:
                    - app-release.ipa
                root: ~/
    bump_version:
        docker:
            - image: cimg/node:20.13.1
        parameters:
            prepare_delivery:
                default: false
                description: Whether to prepare for a delivery. If true, the version bump is committed.
                type: boolean
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - install_node_modules
            - run:
                command: echo "export NEW_VERSION_NAME=$(yarn --silent next-version calc | jq .versionName)" >> ${BASH_ENV}
                name: Calculate next version name
                working_directory: tools
            - run:
                command: echo "export NEW_VERSION_CODE=$(yarn --silent next-version calc | jq .versionCode)" >> ${BASH_ENV}
                name: Calculate next version code
                working_directory: tools
            - when:
                condition: << parameters.prepare_delivery >>
                steps:
                    - run:
                        command: yarn git-version bump-to ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH}
                        name: Bump git version
                        working_directory: tools
            - persist_environment_variables
    check:
        docker:
            - image: cimg/node:20.13.1
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - check_circleci_config
            - install_flutter
            - run:
                command: fvm dart format -l 120 -o none --set-exit-if-changed .
                name: Check Formatting
            - prepare_project
            - run:
                command: fvm flutter analyze --fatal-infos --fatal-warnings
                name: Check Analyzer and Linting
    deliver_android:
        docker:
            - image: cimg/android:2024.08.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - install_node_modules
            - install_fastlane:
                directory: android
            - run:
                command: bundle exec fastlane android upload aab_path:attached_workspace/app-release.aab production_delivery:"<< parameters.production_delivery >>" version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Google PlayStore Upload'
                working_directory: android
            - run:
                command: echo "export ANDROID_RELEASE_ID='$(yarn --silent github-release create android ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --production-delivery << parameters.production_delivery >> --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --release-notes "Release v${NEW_VERSION_NAME}+${NEW_VERSION_CODE}")'" >> ${BASH_ENV}
                name: Create Github Release
                working_directory: tools
            - run:
                command: yarn github-release-asset upload android --releaseId ${ANDROID_RELEASE_ID} --files "$(ls ~/attached_workspace/*.{apk,aab})" --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}
                name: Add Builds to Github Release
                working_directory: tools
    deliver_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 16.1.0
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - install_node_modules
            - install_fastlane:
                directory: ios
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios production_upload ipa_path:attached_workspace/app-release.ipa version_name:${NEW_VERSION_NAME}
                        name: '[FL] Apple AppStore Upload'
                        working_directory: ios
            - unless:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios beta_upload ipa_path:attached_workspace/app-release.ipa
                        name: '[FL] Apple Testflight Upload'
                        working_directory: ios
            - run:
                command: echo "export IOS_RELEASE_ID='$(yarn --silent github-release create ios ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --production-delivery << parameters.production_delivery >> --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --release-notes "Release v${NEW_VERSION_NAME}+${NEW_VERSION_CODE}")'" >> ${BASH_ENV}
                name: Create Github Release
                working_directory: tools
            - run:
                command: yarn github-release-asset upload ios --releaseId ${IOS_RELEASE_ID} --files "$(ls ~/attached_workspace/*.ipa)" --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}
                name: Add Build to Github Release
                working_directory: tools
    promote_android:
        docker:
            - image: cimg/android:2024.08.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - install_node_modules
            - install_fastlane:
                directory: android
            - run:
                command: bundle exec fastlane android promote
                name: '[FL] Google PlayStore Promotion'
                working_directory: android
            - run:
                command: yarn github-promote-release promote --platform android --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}
                name: Remove Beta Flag from Github Release
                working_directory: tools
    promote_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 16.1.0
        steps:
            - checkout
            - install_node_modules
            - install_fastlane:
                directory: ios
            - run:
                command: bundle exec fastlane ios promote
                name: '[FL] Apple AppStore Promotion'
                working_directory: ios
            - run:
                command: yarn github-promote-release promote --platform ios --github-private-key ${GITHUB_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}
                name: Remove Beta Flag from Github Release
                working_directory: tools
parameters:
    api_triggered:
        default: false
        description: Whether the pipeline was triggered through the CircleCi API (https://circleci.com/docs/api/v2/?shell#trigger-a-new-pipeline).
        type: boolean
    workflow_type:
        default: none
        enum:
            - beta_delivery
            - production_delivery
            - promotion
            - none
        type: enum
version: 2.1
workflows:
    beta_delivery:
        jobs:
            - bump_version:
                context:
                    - github
                prepare_delivery: true
            - build_android:
                context:
                    - app_signing_android
                requires:
                    - bump_version
            - deliver_android:
                context:
                    - github
                    - gruene_google_playstore
                production_delivery: false
                requires:
                    - build_android
            - build_ios:
                context:
                    - app_signing_ios
                requires:
                    - bump_version
            - deliver_ios:
                context:
                    - github
                    - gruene_apple_appstore
                production_delivery: false
                requires:
                    - build_ios
        when:
            and:
                - << pipeline.parameters.api_triggered >>
                - equal:
                    - << pipeline.parameters.workflow_type >>
                    - beta_delivery
    commit:
        jobs:
            - check
            - bump_version
            - build_android:
                context:
                    - app_signing_android
                requires:
                    - check
                    - bump_version
        unless:
            or:
                - equal:
                    - main
                    - << pipeline.git.branch >>
                - << pipeline.parameters.api_triggered >>
    commit_main:
        jobs:
            - bump_version
            - build_android:
                context:
                    - app_signing_android
                requires:
                    - bump_version
        when:
            and:
                - equal:
                    - main
                    - << pipeline.git.branch >>
                - not: << pipeline.parameters.api_triggered >>
    production_delivery:
        jobs:
            - bump_version:
                context:
                    - github
                prepare_delivery: true
            - build_android:
                context:
                    - app_signing_android
                requires:
                    - bump_version
            - deliver_android:
                context:
                    - github
                    - gruene_google_playstore
                production_delivery: true
                requires:
                    - build_android
            - build_ios:
                context:
                    - app_signing_ios
                requires:
                    - bump_version
            - deliver_ios:
                context:
                    - github
                    - gruene_apple_appstore
                production_delivery: true
                requires:
                    - build_ios
        when:
            and:
                - << pipeline.parameters.api_triggered >>
                - equal:
                    - << pipeline.parameters.workflow_type >>
                    - production_delivery
    promotion:
        jobs:
            - promote_android:
                context:
                    - github
                    - gruene_google_playstore
            - promote_ios:
                context:
                    - github
                    - gruene_apple_appstore
        when:
            and:
                - << pipeline.parameters.api_triggered >>
                - equal:
                    - << pipeline.parameters.workflow_type >>
                    - promotion

